Angel : 
Fin partida y mostar informe

        HECHO: Introduccion turno.

Daniel:



        HECHO: 



import socket
import threading
import random
import pickle


class Cliente:
    def _init_(self, sock, nombre):
        self.nombre: str = nombre
        self.sock: socket.socket = sock

    def preparado(self):
        datos = self.sock.recv(1024)
        if datos:
            datos = datos.decode()
            if datos == 'preparado':
                return None
            return None


class Partida:
    def _init_(self, cliente1: Cliente, cliente2: Cliente):
        self.clientes = (cliente1, cliente2)
        self.activo: int = 0
        self.no_activo: int = 0

    def tirar_moneda(self):
        elegido = random.randint(0, 1)
        self.activo = elegido
        self.no_activo = 1 - elegido

    def cambiar_activo(self):
        activo_actual = int(self.activo)
        self.activo = int(self.no_activo)
        self.no_activo = activo_actual

    def jugar(self):
        self.clientes[0].sock.sendall(f'Va a empezar la partida. Tu oponente es: {self.clientes[1].nombre}'.encode())
        self.clientes[1].sock.sendall(f'Va a empezar la partida. Tu oponente es: {self.clientes[0].nombre}'.encode())
        self.tirar_moneda()
        self.clientes[self.activo].sock.sendall('tu turno'.encode())
        self.clientes[self.no_activo].sock.sendall('no tu turno'.encode())
        prep1 = threading.Thread(target=self.clientes[0].preparado, args=())
        prep2 = threading.Thread(target=self.clientes[1].preparado, args=())
        prep1.start()
        prep2.start()
        prep1.join()
        prep2.join()
        fin = False
        while not fin:
            datos = self.clientes[self.activo].sock.recv(1024)
            self.clientes[self.no_activo].sock.sendall(datos)
            datos = self.clientes[self.no_activo].sock.recv(1024)
            resultado = pickle.loads(datos)
            self.clientes[self.activo].sock.sendall(datos)
            if resultado:
                fin = resultado['fin']
            if not fin:
                self.cambiar_activo()

        for c in self.clientes:
            c.sock.sendall(f'Se acabo la partida. El ganador es {self.clientes[self.activo].nombre}')
            c.sock.close()


class Server:
    def _init_(self, conexion):
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.sock.bind(conexion)
        self.lobby = []
        self.lock = threading.Lock()

    def client_mgmt(self, sock: socket.socket):
        datos = sock.recv(1024)
        nombre = datos.decode()
        cliente = Cliente(sock, nombre)
        self.lock.acquire()
        try:
            if len(self.lobby) == 0:
                self.lobby.append(cliente)
                cliente.sock.sendall('Esperando a que se conecte otro cliente'.encode())
            else:
                cliente2 = self.lobby[0]
                self.lobby = []
                partida = Partida(cliente, cliente2)
                play_thread = threading.Thread(target=partida.jugar(), args=())
                play_thread.start()
        finally:
            self.lock.release()
        return None

    def run(self):
        self.sock.listen()
        while True:
            try:
                c_sock, addr = self.sock.accept()
                if c_sock:
                    hilo = threading.Thread(target=self.client_mgmt, args=(c_sock,))
                    hilo.start()
            except KeyboardInterrupt:
                break
        self.sock.close()


ip = '127.0.0.1'
port = 1234

servidor = Server((ip, port))
servidor.run()

print('FIN')